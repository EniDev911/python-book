---
title: "Módulo Os"
author: enidev911
categories: [Python, Módulos]
date: 2024-01-23
---

En Python, el módulo os es una biblioteca estándar que proporciona una interfaz para interactuar con el sistema operativo en el que se ejecuta el programa. Permite realizar operaciones relacionadas como la gestión de archivos, directorios, rutas, variables de entorno y otras funcionalidades del sistema operativo.


## Manejo de archivos y carpetas

### Obtener el directorio actual

Para obtener el directorio de trabajo actual, usamos la función `.getcwd()` (*get current working directory*).

Esta función devuelve el directorio actual en forma de cadena:

```py
import os

print(os.getcwd())
```

```
'/home/usuario/proyecto_python'
```
{: .nolineno .noheader }

> La salida dependerá del sistema operativo que estés usando. En Windows podrías obtener algo así `C:\\usuario\\proyecto_python`
{: .prompt-info }


### Cambiar el directorio de trabajo

Podemos cambiar de directorio usando la función `chdir()` (*change directory*). Los directorios pueden ser relativos o absolutos.

En sistemas operativos basados en Unix, tenemos los siguientes atajos:

- `'.'`: Es el directorio actual.
- `'..'`: Es el directorio anterior.
- `/`: Es el directorio raíz.


```py
import os

print(os.getcwd())
os.chdir('..')
print(os.getcwd())
```

```
'/home/usuario/proyecto_python'
'/home/usuario/'
```
{: .nolineno .noheader}


Según el sistema operativo las barras o separadores de directorio se escriben de diferentes maneras. Para no tener ese problema es recomendable usar el método `os.path.join()` como en el siguiente ejemplo:

```py
directorio = os.path.join('/home', 'usuario', 'ejercicios_python')
os.chdir(directorio)
```

> Es recomendable usar el método `os.path.join` es más flexible para las barras separadoras de directorio.
{: .prompt-tip }


> Usar directorios relativos al actual (que comienzan con `'./'`) y no absolutos (que comienzan con `'/'`) facilita la portabilidad del código de una máquina a otra.
{: .prompt-info }


### Listar directorios y archivos

La función `listdir()` toma un directorio (*path o camino*) y devuelve una lista con todos los archivos y subdirectorios de ese directorio. Si no se le pasa ningún parámetro, devuelve los del directorio de trabajo actual.


```py
import os

print(os.listdir())
```

```
ejercicio_1.py
ejercicio_2.py
ejercicio_3.py
ejercicio_4.py
ejercicio_5.py
```
{: .nolineno .noheader }